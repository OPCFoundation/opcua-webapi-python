# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist
from opcua_webapi.models.browse_description import BrowseDescription
from opcua_webapi.models.request_header import RequestHeader
from opcua_webapi.models.view_description import ViewDescription

class BrowseRequest(BaseModel):
    """
    BrowseRequest
    """
    request_header: Optional[RequestHeader] = Field(None, alias="RequestHeader")
    view: Optional[ViewDescription] = Field(None, alias="View")
    requested_max_references_per_node: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="RequestedMaxReferencesPerNode")
    nodes_to_browse: Optional[conlist(BrowseDescription)] = Field(None, alias="NodesToBrowse")
    __properties = ["RequestHeader", "View", "RequestedMaxReferencesPerNode", "NodesToBrowse"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowseRequest:
        """Create an instance of BrowseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request_header
        if self.request_header:
            _dict['RequestHeader'] = self.request_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['View'] = self.view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes_to_browse (list)
        _items = []
        if self.nodes_to_browse:
            for _item in self.nodes_to_browse:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NodesToBrowse'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowseRequest:
        """Create an instance of BrowseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowseRequest.parse_obj(obj)

        _obj = BrowseRequest.parse_obj({
            "request_header": RequestHeader.from_dict(obj.get("RequestHeader")) if obj.get("RequestHeader") is not None else None,
            "view": ViewDescription.from_dict(obj.get("View")) if obj.get("View") is not None else None,
            "requested_max_references_per_node": obj.get("RequestedMaxReferencesPerNode"),
            "nodes_to_browse": [BrowseDescription.from_dict(_item) for _item in obj.get("NodesToBrowse")] if obj.get("NodesToBrowse") is not None else None
        })
        return _obj


