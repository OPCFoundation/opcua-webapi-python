# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from opcua_webapi.models.key_value_pair import KeyValuePair
from opcua_webapi.models.localized_text import LocalizedText

class FieldMetaData(BaseModel):
    """
    FieldMetaData
    """
    name: Optional[StrictStr] = Field(None, alias="Name")
    description: Optional[LocalizedText] = Field(None, alias="Description")
    field_flags: Optional[conint(strict=True, le=65535, ge=0)] = Field(None, alias="FieldFlags")
    built_in_type: Optional[conint(strict=True, le=255, ge=0)] = Field(None, alias="BuiltInType")
    data_type: Optional[StrictStr] = Field(None, alias="DataType")
    value_rank: Optional[StrictInt] = Field(None, alias="ValueRank")
    array_dimensions: Optional[conlist(conint(strict=True, le=4294967295, ge=0))] = Field(None, alias="ArrayDimensions")
    max_string_length: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="MaxStringLength")
    data_set_field_id: Optional[StrictStr] = Field(None, alias="DataSetFieldId")
    properties: Optional[conlist(KeyValuePair)] = Field(None, alias="Properties")
    __properties = ["Name", "Description", "FieldFlags", "BuiltInType", "DataType", "ValueRank", "ArrayDimensions", "MaxStringLength", "DataSetFieldId", "Properties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FieldMetaData:
        """Create an instance of FieldMetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['Description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FieldMetaData:
        """Create an instance of FieldMetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FieldMetaData.parse_obj(obj)

        _obj = FieldMetaData.parse_obj({
            "name": obj.get("Name"),
            "description": LocalizedText.from_dict(obj.get("Description")) if obj.get("Description") is not None else None,
            "field_flags": obj.get("FieldFlags"),
            "built_in_type": obj.get("BuiltInType"),
            "data_type": obj.get("DataType"),
            "value_rank": obj.get("ValueRank"),
            "array_dimensions": obj.get("ArrayDimensions"),
            "max_string_length": obj.get("MaxStringLength"),
            "data_set_field_id": obj.get("DataSetFieldId"),
            "properties": [KeyValuePair.from_dict(_item) for _item in obj.get("Properties")] if obj.get("Properties") is not None else None
        })
        return _obj


