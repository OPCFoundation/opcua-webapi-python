# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from opcua_webapi.models.enum_description import EnumDescription
from opcua_webapi.models.simple_type_description import SimpleTypeDescription
from opcua_webapi.models.structure_description import StructureDescription

class DataTypeSchemaHeader(BaseModel):
    """
    DataTypeSchemaHeader
    """
    namespaces: Optional[conlist(StrictStr)] = Field(None, alias="Namespaces")
    structure_data_types: Optional[conlist(StructureDescription)] = Field(None, alias="StructureDataTypes")
    enum_data_types: Optional[conlist(EnumDescription)] = Field(None, alias="EnumDataTypes")
    simple_data_types: Optional[conlist(SimpleTypeDescription)] = Field(None, alias="SimpleDataTypes")
    __properties = ["Namespaces", "StructureDataTypes", "EnumDataTypes", "SimpleDataTypes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataTypeSchemaHeader:
        """Create an instance of DataTypeSchemaHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in structure_data_types (list)
        _items = []
        if self.structure_data_types:
            for _item in self.structure_data_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['StructureDataTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enum_data_types (list)
        _items = []
        if self.enum_data_types:
            for _item in self.enum_data_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['EnumDataTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in simple_data_types (list)
        _items = []
        if self.simple_data_types:
            for _item in self.simple_data_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SimpleDataTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataTypeSchemaHeader:
        """Create an instance of DataTypeSchemaHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataTypeSchemaHeader.parse_obj(obj)

        _obj = DataTypeSchemaHeader.parse_obj({
            "namespaces": obj.get("Namespaces"),
            "structure_data_types": [StructureDescription.from_dict(_item) for _item in obj.get("StructureDataTypes")] if obj.get("StructureDataTypes") is not None else None,
            "enum_data_types": [EnumDescription.from_dict(_item) for _item in obj.get("EnumDataTypes")] if obj.get("EnumDataTypes") is not None else None,
            "simple_data_types": [SimpleTypeDescription.from_dict(_item) for _item in obj.get("SimpleDataTypes")] if obj.get("SimpleDataTypes") is not None else None
        })
        return _obj


