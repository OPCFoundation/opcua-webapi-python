# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from opcua_webapi.models.key_value_pair import KeyValuePair
from opcua_webapi.models.role_permission_type import RolePermissionType
from typing import Optional, Set
from typing_extensions import Self

class SecurityGroupDataType(BaseModel):
    """
    SecurityGroupDataType
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    security_group_folder: Optional[List[StrictStr]] = Field(default=None, alias="SecurityGroupFolder")
    key_lifetime: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, alias="KeyLifetime")
    security_policy_uri: Optional[StrictStr] = Field(default=None, alias="SecurityPolicyUri")
    max_future_key_count: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=0, alias="MaxFutureKeyCount")
    max_past_key_count: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=0, alias="MaxPastKeyCount")
    security_group_id: Optional[StrictStr] = Field(default=None, alias="SecurityGroupId")
    role_permissions: Optional[List[RolePermissionType]] = Field(default=None, alias="RolePermissions")
    group_properties: Optional[List[KeyValuePair]] = Field(default=None, alias="GroupProperties")
    __properties: ClassVar[List[str]] = ["Name", "SecurityGroupFolder", "KeyLifetime", "SecurityPolicyUri", "MaxFutureKeyCount", "MaxPastKeyCount", "SecurityGroupId", "RolePermissions", "GroupProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityGroupDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in role_permissions (list)
        _items = []
        if self.role_permissions:
            for _item_role_permissions in self.role_permissions:
                if _item_role_permissions:
                    _items.append(_item_role_permissions.to_dict())
            _dict['RolePermissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_properties (list)
        _items = []
        if self.group_properties:
            for _item_group_properties in self.group_properties:
                if _item_group_properties:
                    _items.append(_item_group_properties.to_dict())
            _dict['GroupProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityGroupDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "SecurityGroupFolder": obj.get("SecurityGroupFolder"),
            "KeyLifetime": obj.get("KeyLifetime") if obj.get("KeyLifetime") is not None else 0,
            "SecurityPolicyUri": obj.get("SecurityPolicyUri"),
            "MaxFutureKeyCount": obj.get("MaxFutureKeyCount") if obj.get("MaxFutureKeyCount") is not None else 0,
            "MaxPastKeyCount": obj.get("MaxPastKeyCount") if obj.get("MaxPastKeyCount") is not None else 0,
            "SecurityGroupId": obj.get("SecurityGroupId"),
            "RolePermissions": [RolePermissionType.from_dict(_item) for _item in obj["RolePermissions"]] if obj.get("RolePermissions") is not None else None,
            "GroupProperties": [KeyValuePair.from_dict(_item) for _item in obj["GroupProperties"]] if obj.get("GroupProperties") is not None else None
        })
        return _obj


