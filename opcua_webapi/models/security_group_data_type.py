# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist
from opcua_webapi.models.key_value_pair import KeyValuePair
from opcua_webapi.models.role_permission_type import RolePermissionType

class SecurityGroupDataType(BaseModel):
    """
    SecurityGroupDataType
    """
    name: Optional[StrictStr] = Field(None, alias="Name")
    security_group_folder: Optional[conlist(StrictStr)] = Field(None, alias="SecurityGroupFolder")
    key_lifetime: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="KeyLifetime")
    security_policy_uri: Optional[StrictStr] = Field(None, alias="SecurityPolicyUri")
    max_future_key_count: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="MaxFutureKeyCount")
    max_past_key_count: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="MaxPastKeyCount")
    security_group_id: Optional[StrictStr] = Field(None, alias="SecurityGroupId")
    role_permissions: Optional[conlist(RolePermissionType)] = Field(None, alias="RolePermissions")
    group_properties: Optional[conlist(KeyValuePair)] = Field(None, alias="GroupProperties")
    __properties = ["Name", "SecurityGroupFolder", "KeyLifetime", "SecurityPolicyUri", "MaxFutureKeyCount", "MaxPastKeyCount", "SecurityGroupId", "RolePermissions", "GroupProperties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SecurityGroupDataType:
        """Create an instance of SecurityGroupDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in role_permissions (list)
        _items = []
        if self.role_permissions:
            for _item in self.role_permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RolePermissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_properties (list)
        _items = []
        if self.group_properties:
            for _item in self.group_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['GroupProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SecurityGroupDataType:
        """Create an instance of SecurityGroupDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SecurityGroupDataType.parse_obj(obj)

        _obj = SecurityGroupDataType.parse_obj({
            "name": obj.get("Name"),
            "security_group_folder": obj.get("SecurityGroupFolder"),
            "key_lifetime": obj.get("KeyLifetime"),
            "security_policy_uri": obj.get("SecurityPolicyUri"),
            "max_future_key_count": obj.get("MaxFutureKeyCount"),
            "max_past_key_count": obj.get("MaxPastKeyCount"),
            "security_group_id": obj.get("SecurityGroupId"),
            "role_permissions": [RolePermissionType.from_dict(_item) for _item in obj.get("RolePermissions")] if obj.get("RolePermissions") is not None else None,
            "group_properties": [KeyValuePair.from_dict(_item) for _item in obj.get("GroupProperties")] if obj.get("GroupProperties") is not None else None
        })
        return _obj


