# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictBytes, StrictStr, conlist
from opcua_webapi.models.request_header import RequestHeader

class BrowseNextRequest(BaseModel):
    """
    BrowseNextRequest
    """
    request_header: Optional[RequestHeader] = Field(None, alias="RequestHeader")
    release_continuation_points: Optional[StrictBool] = Field(None, alias="ReleaseContinuationPoints")
    continuation_points: Optional[conlist(Union[StrictBytes, StrictStr])] = Field(None, alias="ContinuationPoints")
    __properties = ["RequestHeader", "ReleaseContinuationPoints", "ContinuationPoints"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowseNextRequest:
        """Create an instance of BrowseNextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request_header
        if self.request_header:
            _dict['RequestHeader'] = self.request_header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowseNextRequest:
        """Create an instance of BrowseNextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowseNextRequest.parse_obj(obj)

        _obj = BrowseNextRequest.parse_obj({
            "request_header": RequestHeader.from_dict(obj.get("RequestHeader")) if obj.get("RequestHeader") is not None else None,
            "release_continuation_points": obj.get("ReleaseContinuationPoints"),
            "continuation_points": obj.get("ContinuationPoints")
        })
        return _obj


