# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictFloat, StrictInt, StrictStr, conint, conlist
from opcua_webapi.models.endpoint_description import EndpointDescription
from opcua_webapi.models.response_header import ResponseHeader
from opcua_webapi.models.signature_data import SignatureData
from opcua_webapi.models.signed_software_certificate import SignedSoftwareCertificate

class CreateSessionResponse(BaseModel):
    """
    CreateSessionResponse
    """
    response_header: Optional[ResponseHeader] = Field(None, alias="ResponseHeader")
    session_id: Optional[StrictStr] = Field(None, alias="SessionId")
    authentication_token: Optional[StrictStr] = Field(None, alias="AuthenticationToken")
    revised_session_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="RevisedSessionTimeout")
    server_nonce: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="ServerNonce")
    server_certificate: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="ServerCertificate")
    server_endpoints: Optional[conlist(EndpointDescription)] = Field(None, alias="ServerEndpoints")
    server_software_certificates: Optional[conlist(SignedSoftwareCertificate)] = Field(None, alias="ServerSoftwareCertificates")
    server_signature: Optional[SignatureData] = Field(None, alias="ServerSignature")
    max_request_message_size: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="MaxRequestMessageSize")
    __properties = ["ResponseHeader", "SessionId", "AuthenticationToken", "RevisedSessionTimeout", "ServerNonce", "ServerCertificate", "ServerEndpoints", "ServerSoftwareCertificates", "ServerSignature", "MaxRequestMessageSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSessionResponse:
        """Create an instance of CreateSessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of response_header
        if self.response_header:
            _dict['ResponseHeader'] = self.response_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in server_endpoints (list)
        _items = []
        if self.server_endpoints:
            for _item in self.server_endpoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ServerEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_software_certificates (list)
        _items = []
        if self.server_software_certificates:
            for _item in self.server_software_certificates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ServerSoftwareCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of server_signature
        if self.server_signature:
            _dict['ServerSignature'] = self.server_signature.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSessionResponse:
        """Create an instance of CreateSessionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSessionResponse.parse_obj(obj)

        _obj = CreateSessionResponse.parse_obj({
            "response_header": ResponseHeader.from_dict(obj.get("ResponseHeader")) if obj.get("ResponseHeader") is not None else None,
            "session_id": obj.get("SessionId"),
            "authentication_token": obj.get("AuthenticationToken"),
            "revised_session_timeout": obj.get("RevisedSessionTimeout"),
            "server_nonce": obj.get("ServerNonce"),
            "server_certificate": obj.get("ServerCertificate"),
            "server_endpoints": [EndpointDescription.from_dict(_item) for _item in obj.get("ServerEndpoints")] if obj.get("ServerEndpoints") is not None else None,
            "server_software_certificates": [SignedSoftwareCertificate.from_dict(_item) for _item in obj.get("ServerSoftwareCertificates")] if obj.get("ServerSoftwareCertificates") is not None else None,
            "server_signature": SignatureData.from_dict(obj.get("ServerSignature")) if obj.get("ServerSignature") is not None else None,
            "max_request_message_size": obj.get("MaxRequestMessageSize")
        })
        return _obj


