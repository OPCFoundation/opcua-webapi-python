# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from opcua_webapi.models.endpoint_description import EndpointDescription
from opcua_webapi.models.response_header import ResponseHeader
from opcua_webapi.models.signature_data import SignatureData
from opcua_webapi.models.signed_software_certificate import SignedSoftwareCertificate
from typing import Optional, Set
from typing_extensions import Self

class CreateSessionResponse(BaseModel):
    """
    [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2).
    """ # noqa: E501
    response_header: Optional[ResponseHeader] = Field(default=None, alias="ResponseHeader")
    session_id: Optional[StrictStr] = Field(default=None, alias="SessionId")
    authentication_token: Optional[StrictStr] = Field(default=None, alias="AuthenticationToken")
    revised_session_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, alias="RevisedSessionTimeout")
    server_nonce: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="ServerNonce")
    server_certificate: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="ServerCertificate")
    server_endpoints: Optional[List[EndpointDescription]] = Field(default=None, alias="ServerEndpoints")
    server_software_certificates: Optional[List[SignedSoftwareCertificate]] = Field(default=None, alias="ServerSoftwareCertificates")
    server_signature: Optional[SignatureData] = Field(default=None, alias="ServerSignature")
    max_request_message_size: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=0, alias="MaxRequestMessageSize")
    __properties: ClassVar[List[str]] = ["ResponseHeader", "SessionId", "AuthenticationToken", "RevisedSessionTimeout", "ServerNonce", "ServerCertificate", "ServerEndpoints", "ServerSoftwareCertificates", "ServerSignature", "MaxRequestMessageSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response_header
        if self.response_header:
            _dict['ResponseHeader'] = self.response_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in server_endpoints (list)
        _items = []
        if self.server_endpoints:
            for _item_server_endpoints in self.server_endpoints:
                if _item_server_endpoints:
                    _items.append(_item_server_endpoints.to_dict())
            _dict['ServerEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_software_certificates (list)
        _items = []
        if self.server_software_certificates:
            for _item_server_software_certificates in self.server_software_certificates:
                if _item_server_software_certificates:
                    _items.append(_item_server_software_certificates.to_dict())
            _dict['ServerSoftwareCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of server_signature
        if self.server_signature:
            _dict['ServerSignature'] = self.server_signature.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSessionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ResponseHeader": ResponseHeader.from_dict(obj["ResponseHeader"]) if obj.get("ResponseHeader") is not None else None,
            "SessionId": obj.get("SessionId"),
            "AuthenticationToken": obj.get("AuthenticationToken"),
            "RevisedSessionTimeout": obj.get("RevisedSessionTimeout") if obj.get("RevisedSessionTimeout") is not None else 0,
            "ServerNonce": obj.get("ServerNonce"),
            "ServerCertificate": obj.get("ServerCertificate"),
            "ServerEndpoints": [EndpointDescription.from_dict(_item) for _item in obj["ServerEndpoints"]] if obj.get("ServerEndpoints") is not None else None,
            "ServerSoftwareCertificates": [SignedSoftwareCertificate.from_dict(_item) for _item in obj["ServerSoftwareCertificates"]] if obj.get("ServerSoftwareCertificates") is not None else None,
            "ServerSignature": SignatureData.from_dict(obj["ServerSignature"]) if obj.get("ServerSignature") is not None else None,
            "MaxRequestMessageSize": obj.get("MaxRequestMessageSize") if obj.get("MaxRequestMessageSize") is not None else 0
        })
        return _obj


