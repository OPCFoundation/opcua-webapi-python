# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist
from opcua_webapi.models.key_value_pair import KeyValuePair
from opcua_webapi.models.user_token_policy import UserTokenPolicy

class PubSubKeyPushTargetDataType(BaseModel):
    """
    PubSubKeyPushTargetDataType
    """
    application_uri: Optional[StrictStr] = Field(None, alias="ApplicationUri")
    push_target_folder: Optional[conlist(StrictStr)] = Field(None, alias="PushTargetFolder")
    endpoint_url: Optional[StrictStr] = Field(None, alias="EndpointUrl")
    security_policy_uri: Optional[StrictStr] = Field(None, alias="SecurityPolicyUri")
    user_token_type: Optional[UserTokenPolicy] = Field(None, alias="UserTokenType")
    requested_key_count: Optional[conint(strict=True, le=65535, ge=0)] = Field(None, alias="RequestedKeyCount")
    retry_interval: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="RetryInterval")
    push_target_properties: Optional[conlist(KeyValuePair)] = Field(None, alias="PushTargetProperties")
    security_groups: Optional[conlist(StrictStr)] = Field(None, alias="SecurityGroups")
    __properties = ["ApplicationUri", "PushTargetFolder", "EndpointUrl", "SecurityPolicyUri", "UserTokenType", "RequestedKeyCount", "RetryInterval", "PushTargetProperties", "SecurityGroups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PubSubKeyPushTargetDataType:
        """Create an instance of PubSubKeyPushTargetDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_token_type
        if self.user_token_type:
            _dict['UserTokenType'] = self.user_token_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in push_target_properties (list)
        _items = []
        if self.push_target_properties:
            for _item in self.push_target_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PushTargetProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PubSubKeyPushTargetDataType:
        """Create an instance of PubSubKeyPushTargetDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PubSubKeyPushTargetDataType.parse_obj(obj)

        _obj = PubSubKeyPushTargetDataType.parse_obj({
            "application_uri": obj.get("ApplicationUri"),
            "push_target_folder": obj.get("PushTargetFolder"),
            "endpoint_url": obj.get("EndpointUrl"),
            "security_policy_uri": obj.get("SecurityPolicyUri"),
            "user_token_type": UserTokenPolicy.from_dict(obj.get("UserTokenType")) if obj.get("UserTokenType") is not None else None,
            "requested_key_count": obj.get("RequestedKeyCount"),
            "retry_interval": obj.get("RetryInterval"),
            "push_target_properties": [KeyValuePair.from_dict(_item) for _item in obj.get("PushTargetProperties")] if obj.get("PushTargetProperties") is not None else None,
            "security_groups": obj.get("SecurityGroups")
        })
        return _obj


