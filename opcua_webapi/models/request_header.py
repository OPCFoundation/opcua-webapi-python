# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from opcua_webapi.models.extension_object import ExtensionObject

class RequestHeader(BaseModel):
    """
    RequestHeader
    """
    authentication_token: Optional[StrictStr] = Field(None, alias="AuthenticationToken")
    timestamp: Optional[datetime] = Field(None, alias="Timestamp")
    request_handle: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="RequestHandle")
    return_diagnostics: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="ReturnDiagnostics")
    audit_entry_id: Optional[StrictStr] = Field(None, alias="AuditEntryId")
    timeout_hint: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="TimeoutHint")
    additional_header: Optional[ExtensionObject] = Field(None, alias="AdditionalHeader")
    __properties = ["AuthenticationToken", "Timestamp", "RequestHandle", "ReturnDiagnostics", "AuditEntryId", "TimeoutHint", "AdditionalHeader"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestHeader:
        """Create an instance of RequestHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of additional_header
        if self.additional_header:
            _dict['AdditionalHeader'] = self.additional_header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestHeader:
        """Create an instance of RequestHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestHeader.parse_obj(obj)

        _obj = RequestHeader.parse_obj({
            "authentication_token": obj.get("AuthenticationToken"),
            "timestamp": obj.get("Timestamp"),
            "request_handle": obj.get("RequestHandle"),
            "return_diagnostics": obj.get("ReturnDiagnostics"),
            "audit_entry_id": obj.get("AuditEntryId"),
            "timeout_hint": obj.get("TimeoutHint"),
            "additional_header": ExtensionObject.from_dict(obj.get("AdditionalHeader")) if obj.get("AdditionalHeader") is not None else None
        })
        return _obj


