# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from opcua_webapi.models.localized_text import LocalizedText

class EnumField(BaseModel):
    """
    EnumField
    """
    name: Optional[StrictStr] = Field(None, alias="Name")
    value: Optional[StrictInt] = Field(None, alias="Value")
    display_name: Optional[LocalizedText] = Field(None, alias="DisplayName")
    description: Optional[LocalizedText] = Field(None, alias="Description")
    __properties = ["Value", "DisplayName", "Description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnumField:
        """Create an instance of EnumField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['DisplayName'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['Description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnumField:
        """Create an instance of EnumField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnumField.parse_obj(obj)

        _obj = EnumField.parse_obj({
            "value": obj.get("Value"),
            "display_name": LocalizedText.from_dict(obj.get("DisplayName")) if obj.get("DisplayName") is not None else None,
            "description": LocalizedText.from_dict(obj.get("Description")) if obj.get("Description") is not None else None
        })
        return _obj


