# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from opcua_webapi.models.localized_text import LocalizedText

class ApplicationDescription(BaseModel):
    """
    ApplicationDescription
    """
    application_uri: Optional[StrictStr] = Field(None, alias="ApplicationUri")
    product_uri: Optional[StrictStr] = Field(None, alias="ProductUri")
    application_name: Optional[LocalizedText] = Field(None, alias="ApplicationName")
    application_type: Optional[StrictInt] = Field(None, alias="ApplicationType")
    gateway_server_uri: Optional[StrictStr] = Field(None, alias="GatewayServerUri")
    discovery_profile_uri: Optional[StrictStr] = Field(None, alias="DiscoveryProfileUri")
    discovery_urls: Optional[conlist(StrictStr)] = Field(None, alias="DiscoveryUrls")
    __properties = ["ApplicationUri", "ProductUri", "ApplicationName", "ApplicationType", "GatewayServerUri", "DiscoveryProfileUri", "DiscoveryUrls"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplicationDescription:
        """Create an instance of ApplicationDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of application_name
        if self.application_name:
            _dict['ApplicationName'] = self.application_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplicationDescription:
        """Create an instance of ApplicationDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplicationDescription.parse_obj(obj)

        _obj = ApplicationDescription.parse_obj({
            "application_uri": obj.get("ApplicationUri"),
            "product_uri": obj.get("ProductUri"),
            "application_name": LocalizedText.from_dict(obj.get("ApplicationName")) if obj.get("ApplicationName") is not None else None,
            "application_type": obj.get("ApplicationType"),
            "gateway_server_uri": obj.get("GatewayServerUri"),
            "discovery_profile_uri": obj.get("DiscoveryProfileUri"),
            "discovery_urls": obj.get("DiscoveryUrls")
        })
        return _obj


