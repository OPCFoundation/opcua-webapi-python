# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from opcua_webapi.models.data_set_meta_data_type import DataSetMetaDataType
from opcua_webapi.models.extension_object import ExtensionObject
from opcua_webapi.models.key_value_pair import KeyValuePair

class PublishedDataSetDataType(BaseModel):
    """
    PublishedDataSetDataType
    """
    name: Optional[StrictStr] = Field(None, alias="Name")
    data_set_folder: Optional[conlist(StrictStr)] = Field(None, alias="DataSetFolder")
    data_set_meta_data: Optional[DataSetMetaDataType] = Field(None, alias="DataSetMetaData")
    extension_fields: Optional[conlist(KeyValuePair)] = Field(None, alias="ExtensionFields")
    data_set_source: Optional[ExtensionObject] = Field(None, alias="DataSetSource")
    __properties = ["Name", "DataSetFolder", "DataSetMetaData", "ExtensionFields", "DataSetSource"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublishedDataSetDataType:
        """Create an instance of PublishedDataSetDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data_set_meta_data
        if self.data_set_meta_data:
            _dict['DataSetMetaData'] = self.data_set_meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extension_fields (list)
        _items = []
        if self.extension_fields:
            for _item in self.extension_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExtensionFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_set_source
        if self.data_set_source:
            _dict['DataSetSource'] = self.data_set_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublishedDataSetDataType:
        """Create an instance of PublishedDataSetDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublishedDataSetDataType.parse_obj(obj)

        _obj = PublishedDataSetDataType.parse_obj({
            "name": obj.get("Name"),
            "data_set_folder": obj.get("DataSetFolder"),
            "data_set_meta_data": DataSetMetaDataType.from_dict(obj.get("DataSetMetaData")) if obj.get("DataSetMetaData") is not None else None,
            "extension_fields": [KeyValuePair.from_dict(_item) for _item in obj.get("ExtensionFields")] if obj.get("ExtensionFields") is not None else None,
            "data_set_source": ExtensionObject.from_dict(obj.get("DataSetSource")) if obj.get("DataSetSource") is not None else None
        })
        return _obj


