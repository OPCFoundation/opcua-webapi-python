# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from opcua_webapi.models.extension_object import ExtensionObject
from opcua_webapi.models.key_value_pair import KeyValuePair
from opcua_webapi.models.reader_group_data_type import ReaderGroupDataType
from opcua_webapi.models.variant import Variant
from opcua_webapi.models.writer_group_data_type import WriterGroupDataType

class PubSubConnectionDataType(BaseModel):
    """
    PubSubConnectionDataType
    """
    name: Optional[StrictStr] = Field(None, alias="Name")
    enabled: Optional[StrictBool] = Field(None, alias="Enabled")
    publisher_id: Optional[Variant] = Field(None, alias="PublisherId")
    transport_profile_uri: Optional[StrictStr] = Field(None, alias="TransportProfileUri")
    address: Optional[ExtensionObject] = Field(None, alias="Address")
    connection_properties: Optional[conlist(KeyValuePair)] = Field(None, alias="ConnectionProperties")
    transport_settings: Optional[ExtensionObject] = Field(None, alias="TransportSettings")
    writer_groups: Optional[conlist(WriterGroupDataType)] = Field(None, alias="WriterGroups")
    reader_groups: Optional[conlist(ReaderGroupDataType)] = Field(None, alias="ReaderGroups")
    __properties = ["Name", "Enabled", "PublisherId", "TransportProfileUri", "Address", "ConnectionProperties", "TransportSettings", "WriterGroups", "ReaderGroups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PubSubConnectionDataType:
        """Create an instance of PubSubConnectionDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of publisher_id
        if self.publisher_id:
            _dict['PublisherId'] = self.publisher_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connection_properties (list)
        _items = []
        if self.connection_properties:
            for _item in self.connection_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ConnectionProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of transport_settings
        if self.transport_settings:
            _dict['TransportSettings'] = self.transport_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in writer_groups (list)
        _items = []
        if self.writer_groups:
            for _item in self.writer_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['WriterGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reader_groups (list)
        _items = []
        if self.reader_groups:
            for _item in self.reader_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ReaderGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PubSubConnectionDataType:
        """Create an instance of PubSubConnectionDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PubSubConnectionDataType.parse_obj(obj)

        _obj = PubSubConnectionDataType.parse_obj({
            "name": obj.get("Name"),
            "enabled": obj.get("Enabled"),
            "publisher_id": Variant.from_dict(obj.get("PublisherId")) if obj.get("PublisherId") is not None else None,
            "transport_profile_uri": obj.get("TransportProfileUri"),
            "address": ExtensionObject.from_dict(obj.get("Address")) if obj.get("Address") is not None else None,
            "connection_properties": [KeyValuePair.from_dict(_item) for _item in obj.get("ConnectionProperties")] if obj.get("ConnectionProperties") is not None else None,
            "transport_settings": ExtensionObject.from_dict(obj.get("TransportSettings")) if obj.get("TransportSettings") is not None else None,
            "writer_groups": [WriterGroupDataType.from_dict(_item) for _item in obj.get("WriterGroups")] if obj.get("WriterGroups") is not None else None,
            "reader_groups": [ReaderGroupDataType.from_dict(_item) for _item in obj.get("ReaderGroups")] if obj.get("ReaderGroups") is not None else None
        })
        return _obj


