# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opcua_webapi.models.action_method_data_type import ActionMethodDataType
from opcua_webapi.models.action_target_data_type import ActionTargetDataType
from opcua_webapi.models.data_set_meta_data_type import DataSetMetaDataType
from typing import Optional, Set
from typing_extensions import Self

class JsonActionMetaDataMessage(BaseModel):
    """
    JsonActionMetaDataMessage
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageId")
    message_type: Optional[StrictStr] = Field(default=None, alias="MessageType")
    publisher_id: Optional[StrictStr] = Field(default=None, alias="PublisherId")
    data_set_writer_id: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=0, alias="DataSetWriterId")
    data_set_writer_name: Optional[StrictStr] = Field(default=None, alias="DataSetWriterName")
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")
    action_targets: Optional[List[ActionTargetDataType]] = Field(default=None, alias="ActionTargets")
    request: Optional[DataSetMetaDataType] = Field(default=None, alias="Request")
    response: Optional[DataSetMetaDataType] = Field(default=None, alias="Response")
    action_methods: Optional[List[ActionMethodDataType]] = Field(default=None, alias="ActionMethods")
    __properties: ClassVar[List[str]] = ["MessageId", "MessageType", "PublisherId", "DataSetWriterId", "DataSetWriterName", "Timestamp", "ActionTargets", "Request", "Response", "ActionMethods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonActionMetaDataMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_targets (list)
        _items = []
        if self.action_targets:
            for _item_action_targets in self.action_targets:
                if _item_action_targets:
                    _items.append(_item_action_targets.to_dict())
            _dict['ActionTargets'] = _items
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['Request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['Response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in action_methods (list)
        _items = []
        if self.action_methods:
            for _item_action_methods in self.action_methods:
                if _item_action_methods:
                    _items.append(_item_action_methods.to_dict())
            _dict['ActionMethods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonActionMetaDataMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MessageId": obj.get("MessageId"),
            "MessageType": obj.get("MessageType"),
            "PublisherId": obj.get("PublisherId"),
            "DataSetWriterId": obj.get("DataSetWriterId") if obj.get("DataSetWriterId") is not None else 0,
            "DataSetWriterName": obj.get("DataSetWriterName"),
            "Timestamp": obj.get("Timestamp"),
            "ActionTargets": [ActionTargetDataType.from_dict(_item) for _item in obj["ActionTargets"]] if obj.get("ActionTargets") is not None else None,
            "Request": DataSetMetaDataType.from_dict(obj["Request"]) if obj.get("Request") is not None else None,
            "Response": DataSetMetaDataType.from_dict(obj["Response"]) if obj.get("Response") is not None else None,
            "ActionMethods": [ActionMethodDataType.from_dict(_item) for _item in obj["ActionMethods"]] if obj.get("ActionMethods") is not None else None
        })
        return _obj


