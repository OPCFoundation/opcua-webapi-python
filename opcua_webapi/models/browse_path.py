# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from opcua_webapi.models.relative_path import RelativePath

class BrowsePath(BaseModel):
    """
    BrowsePath
    """
    starting_node: Optional[StrictStr] = Field(None, alias="StartingNode")
    relative_path: Optional[RelativePath] = Field(None, alias="RelativePath")
    __properties = ["StartingNode", "RelativePath"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowsePath:
        """Create an instance of BrowsePath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of relative_path
        if self.relative_path:
            _dict['RelativePath'] = self.relative_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowsePath:
        """Create an instance of BrowsePath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowsePath.parse_obj(obj)

        _obj = BrowsePath.parse_obj({
            "starting_node": obj.get("StartingNode"),
            "relative_path": RelativePath.from_dict(obj.get("RelativePath")) if obj.get("RelativePath") is not None else None
        })
        return _obj


