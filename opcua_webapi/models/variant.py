# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, conint, conlist

class Variant(BaseModel):
    """
    Variant
    """
    type: Optional[conint(strict=True, le=255, ge=0)] = Field(None, alias="Type")
    body: Optional[Any] = Field(None, alias="Body")
    dimensions: Optional[conlist(conint(strict=True, ge=0))] = Field(None, alias="Dimensions")
    __properties = ["Type", "Body", "Dimensions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Variant:
        """Create an instance of Variant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if body (nullable) is None
        # and __fields_set__ contains the field
        if self.body is None and "body" in self.__fields_set__:
            _dict['Body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Variant:
        """Create an instance of Variant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Variant.parse_obj(obj)

        _obj = Variant.parse_obj({
            "type": obj.get("Type"),
            "body": obj.get("Body"),
            "dimensions": obj.get("Dimensions")
        })
        return _obj


