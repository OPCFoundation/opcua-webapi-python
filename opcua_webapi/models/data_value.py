# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opcua_webapi.models.status_code import StatusCode
from typing import Optional, Set
from typing_extensions import Self

class DataValue(BaseModel):
    """
    [Link to specification](https://reference.opcfoundation.org/Core/Part6/v105/docs/5.4.2.18).
    """ # noqa: E501
    ua_type: Optional[Annotated[int, Field(le=255, strict=True, ge=0)]] = Field(default=0, alias="UaType")
    value: Optional[Any] = Field(default=None, alias="Value")
    dimensions: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="Dimensions")
    status_code: Optional[StatusCode] = Field(default=None, alias="StatusCode")
    source_timestamp: Optional[datetime] = Field(default=None, alias="SourceTimestamp")
    source_picoseconds: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=None, alias="SourcePicoseconds")
    server_timestamp: Optional[datetime] = Field(default=None, alias="ServerTimestamp")
    server_picoseconds: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=None, alias="ServerPicoseconds")
    __properties: ClassVar[List[str]] = ["UaType", "Value", "Dimensions", "StatusCode", "SourceTimestamp", "SourcePicoseconds", "ServerTimestamp", "ServerPicoseconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_code
        if self.status_code:
            _dict['StatusCode'] = self.status_code.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['Value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "UaType": obj.get("UaType") if obj.get("UaType") is not None else 0,
            "Value": obj.get("Value"),
            "Dimensions": obj.get("Dimensions"),
            "StatusCode": StatusCode.from_dict(obj["StatusCode"]) if obj.get("StatusCode") is not None else None,
            "SourceTimestamp": obj.get("SourceTimestamp"),
            "SourcePicoseconds": obj.get("SourcePicoseconds"),
            "ServerTimestamp": obj.get("ServerTimestamp"),
            "ServerPicoseconds": obj.get("ServerPicoseconds")
        })
        return _obj


