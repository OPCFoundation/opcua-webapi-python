# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opcua_webapi.models.diagnostic_info import DiagnosticInfo
from opcua_webapi.models.extension_object import ExtensionObject
from opcua_webapi.models.status_code import StatusCode
from typing import Optional, Set
from typing_extensions import Self

class ResponseHeader(BaseModel):
    """
    ResponseHeader
    """ # noqa: E501
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")
    request_handle: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=0, alias="RequestHandle")
    service_result: Optional[StatusCode] = Field(default=None, alias="ServiceResult")
    service_diagnostics: Optional[DiagnosticInfo] = Field(default=None, alias="ServiceDiagnostics")
    string_table: Optional[List[StrictStr]] = Field(default=None, alias="StringTable")
    additional_header: Optional[ExtensionObject] = Field(default=None, alias="AdditionalHeader")
    __properties: ClassVar[List[str]] = ["Timestamp", "RequestHandle", "ServiceResult", "ServiceDiagnostics", "StringTable", "AdditionalHeader"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_result
        if self.service_result:
            _dict['ServiceResult'] = self.service_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_diagnostics
        if self.service_diagnostics:
            _dict['ServiceDiagnostics'] = self.service_diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_header
        if self.additional_header:
            _dict['AdditionalHeader'] = self.additional_header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Timestamp": obj.get("Timestamp"),
            "RequestHandle": obj.get("RequestHandle") if obj.get("RequestHandle") is not None else 0,
            "ServiceResult": StatusCode.from_dict(obj["ServiceResult"]) if obj.get("ServiceResult") is not None else None,
            "ServiceDiagnostics": DiagnosticInfo.from_dict(obj["ServiceDiagnostics"]) if obj.get("ServiceDiagnostics") is not None else None,
            "StringTable": obj.get("StringTable"),
            "AdditionalHeader": ExtensionObject.from_dict(obj["AdditionalHeader"]) if obj.get("AdditionalHeader") is not None else None
        })
        return _obj


