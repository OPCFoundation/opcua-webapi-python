# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from opcua_webapi.models.content_filter_element_result import ContentFilterElementResult
from opcua_webapi.models.diagnostic_info import DiagnosticInfo

class ContentFilterResult(BaseModel):
    """
    ContentFilterResult
    """
    element_results: Optional[conlist(ContentFilterElementResult)] = Field(None, alias="ElementResults")
    element_diagnostic_infos: Optional[conlist(DiagnosticInfo)] = Field(None, alias="ElementDiagnosticInfos")
    __properties = ["ElementResults", "ElementDiagnosticInfos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContentFilterResult:
        """Create an instance of ContentFilterResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in element_results (list)
        _items = []
        if self.element_results:
            for _item in self.element_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ElementResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in element_diagnostic_infos (list)
        _items = []
        if self.element_diagnostic_infos:
            for _item in self.element_diagnostic_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ElementDiagnosticInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContentFilterResult:
        """Create an instance of ContentFilterResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContentFilterResult.parse_obj(obj)

        _obj = ContentFilterResult.parse_obj({
            "element_results": [ContentFilterElementResult.from_dict(_item) for _item in obj.get("ElementResults")] if obj.get("ElementResults") is not None else None,
            "element_diagnostic_infos": [DiagnosticInfo.from_dict(_item) for _item in obj.get("ElementDiagnosticInfos")] if obj.get("ElementDiagnosticInfos") is not None else None
        })
        return _obj


