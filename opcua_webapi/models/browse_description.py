# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint

class BrowseDescription(BaseModel):
    """
    BrowseDescription
    """
    node_id: Optional[StrictStr] = Field(None, alias="NodeId")
    browse_direction: Optional[StrictInt] = Field(None, alias="BrowseDirection")
    reference_type_id: Optional[StrictStr] = Field(None, alias="ReferenceTypeId")
    include_subtypes: Optional[StrictBool] = Field(None, alias="IncludeSubtypes")
    node_class_mask: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="NodeClassMask")
    result_mask: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="ResultMask")
    __properties = ["NodeId", "BrowseDirection", "ReferenceTypeId", "IncludeSubtypes", "NodeClassMask", "ResultMask"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowseDescription:
        """Create an instance of BrowseDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowseDescription:
        """Create an instance of BrowseDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowseDescription.parse_obj(obj)

        _obj = BrowseDescription.parse_obj({
            "node_id": obj.get("NodeId"),
            "browse_direction": obj.get("BrowseDirection"),
            "reference_type_id": obj.get("ReferenceTypeId"),
            "include_subtypes": obj.get("IncludeSubtypes"),
            "node_class_mask": obj.get("NodeClassMask"),
            "result_mask": obj.get("ResultMask")
        })
        return _obj


