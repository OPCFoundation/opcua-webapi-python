# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from opcua_webapi.models.pub_sub_connection_data_type import PubSubConnectionDataType
from opcua_webapi.models.published_data_set_data_type import PublishedDataSetDataType

class PubSubConfigurationDataType(BaseModel):
    """
    PubSubConfigurationDataType
    """
    published_data_sets: Optional[conlist(PublishedDataSetDataType)] = Field(None, alias="PublishedDataSets")
    connections: Optional[conlist(PubSubConnectionDataType)] = Field(None, alias="Connections")
    enabled: Optional[StrictBool] = Field(None, alias="Enabled")
    __properties = ["PublishedDataSets", "Connections", "Enabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PubSubConfigurationDataType:
        """Create an instance of PubSubConfigurationDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in published_data_sets (list)
        _items = []
        if self.published_data_sets:
            for _item in self.published_data_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PublishedDataSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item in self.connections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Connections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PubSubConfigurationDataType:
        """Create an instance of PubSubConfigurationDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PubSubConfigurationDataType.parse_obj(obj)

        _obj = PubSubConfigurationDataType.parse_obj({
            "published_data_sets": [PublishedDataSetDataType.from_dict(_item) for _item in obj.get("PublishedDataSets")] if obj.get("PublishedDataSets") is not None else None,
            "connections": [PubSubConnectionDataType.from_dict(_item) for _item in obj.get("Connections")] if obj.get("Connections") is not None else None,
            "enabled": obj.get("Enabled")
        })
        return _obj


