# coding: utf-8

"""
    OPC UA Web API

    Provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from opcua_webapi.models.status_code import StatusCode
from typing import Optional, Set
from typing_extensions import Self

class DiagnosticInfo(BaseModel):
    """
    DiagnosticInfo
    """ # noqa: E501
    symbolic_id: Optional[StrictInt] = Field(default=None, alias="SymbolicId")
    namespace_uri: Optional[StrictInt] = Field(default=None, alias="NamespaceUri")
    locale: Optional[StrictInt] = Field(default=None, alias="Locale")
    localized_text: Optional[StrictInt] = Field(default=None, alias="LocalizedText")
    additional_info: Optional[StrictStr] = Field(default=None, alias="AdditionalInfo")
    inner_status_code: Optional[StatusCode] = Field(default=None, alias="InnerStatusCode")
    inner_diagnostic_info: Optional[DiagnosticInfo] = Field(default=None, alias="InnerDiagnosticInfo")
    __properties: ClassVar[List[str]] = ["SymbolicId", "NamespaceUri", "Locale", "LocalizedText", "AdditionalInfo", "InnerStatusCode", "InnerDiagnosticInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiagnosticInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inner_status_code
        if self.inner_status_code:
            _dict['InnerStatusCode'] = self.inner_status_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_diagnostic_info
        if self.inner_diagnostic_info:
            _dict['InnerDiagnosticInfo'] = self.inner_diagnostic_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiagnosticInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SymbolicId": obj.get("SymbolicId"),
            "NamespaceUri": obj.get("NamespaceUri"),
            "Locale": obj.get("Locale"),
            "LocalizedText": obj.get("LocalizedText"),
            "AdditionalInfo": obj.get("AdditionalInfo"),
            "InnerStatusCode": StatusCode.from_dict(obj["InnerStatusCode"]) if obj.get("InnerStatusCode") is not None else None,
            "InnerDiagnosticInfo": DiagnosticInfo.from_dict(obj["InnerDiagnosticInfo"]) if obj.get("InnerDiagnosticInfo") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
DiagnosticInfo.model_rebuild(raise_errors=False)

