# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint

class DiagnosticInfo(BaseModel):
    """
    DiagnosticInfo
    """
    symbolic_id: Optional[StrictInt] = Field(None, alias="SymbolicId")
    namespace_uri: Optional[StrictInt] = Field(None, alias="NamespaceUri")
    locale: Optional[StrictInt] = Field(None, alias="Locale")
    localized_text: Optional[StrictInt] = Field(None, alias="LocalizedText")
    additional_info: Optional[StrictStr] = Field(None, alias="AdditionalInfo")
    inner_status_code: Optional[conint(strict=True, le=4294967295, ge=0)] = Field(None, alias="InnerStatusCode")
    inner_diagnostic_info: Optional[DiagnosticInfo] = Field(None, alias="InnerDiagnosticInfo")
    __properties = ["SymbolicId", "NamespaceUri", "Locale", "LocalizedText", "AdditionalInfo", "InnerStatusCode", "InnerDiagnosticInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiagnosticInfo:
        """Create an instance of DiagnosticInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of inner_diagnostic_info
        if self.inner_diagnostic_info:
            _dict['InnerDiagnosticInfo'] = self.inner_diagnostic_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiagnosticInfo:
        """Create an instance of DiagnosticInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiagnosticInfo.parse_obj(obj)

        _obj = DiagnosticInfo.parse_obj({
            "symbolic_id": obj.get("SymbolicId"),
            "namespace_uri": obj.get("NamespaceUri"),
            "locale": obj.get("Locale"),
            "localized_text": obj.get("LocalizedText"),
            "additional_info": obj.get("AdditionalInfo"),
            "inner_status_code": obj.get("InnerStatusCode"),
            "inner_diagnostic_info": DiagnosticInfo.from_dict(obj.get("InnerDiagnosticInfo")) if obj.get("InnerDiagnosticInfo") is not None else None
        })
        return _obj

DiagnosticInfo.update_forward_refs()

