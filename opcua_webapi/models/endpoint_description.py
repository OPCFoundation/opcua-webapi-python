# coding: utf-8

"""
    OPC UA Web API

    This API provides simple HTTPS based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictInt, StrictStr, conint, conlist
from opcua_webapi.models.application_description import ApplicationDescription
from opcua_webapi.models.user_token_policy import UserTokenPolicy

class EndpointDescription(BaseModel):
    """
    EndpointDescription
    """
    endpoint_url: Optional[StrictStr] = Field(None, alias="EndpointUrl")
    server: Optional[ApplicationDescription] = Field(None, alias="Server")
    server_certificate: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="ServerCertificate")
    security_mode: Optional[StrictInt] = Field(None, alias="SecurityMode")
    security_policy_uri: Optional[StrictStr] = Field(None, alias="SecurityPolicyUri")
    user_identity_tokens: Optional[conlist(UserTokenPolicy)] = Field(None, alias="UserIdentityTokens")
    transport_profile_uri: Optional[StrictStr] = Field(None, alias="TransportProfileUri")
    security_level: Optional[conint(strict=True, le=255, ge=0)] = Field(None, alias="SecurityLevel")
    __properties = ["EndpointUrl", "Server", "ServerCertificate", "SecurityMode", "SecurityPolicyUri", "UserIdentityTokens", "TransportProfileUri", "SecurityLevel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EndpointDescription:
        """Create an instance of EndpointDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['Server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_identity_tokens (list)
        _items = []
        if self.user_identity_tokens:
            for _item in self.user_identity_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['UserIdentityTokens'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EndpointDescription:
        """Create an instance of EndpointDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EndpointDescription.parse_obj(obj)

        _obj = EndpointDescription.parse_obj({
            "endpoint_url": obj.get("EndpointUrl"),
            "server": ApplicationDescription.from_dict(obj.get("Server")) if obj.get("Server") is not None else None,
            "server_certificate": obj.get("ServerCertificate"),
            "security_mode": obj.get("SecurityMode"),
            "security_policy_uri": obj.get("SecurityPolicyUri"),
            "user_identity_tokens": [UserTokenPolicy.from_dict(_item) for _item in obj.get("UserIdentityTokens")] if obj.get("UserIdentityTokens") is not None else None,
            "transport_profile_uri": obj.get("TransportProfileUri"),
            "security_level": obj.get("SecurityLevel")
        })
        return _obj


